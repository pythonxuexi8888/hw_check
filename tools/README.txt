*******************************************************************************

本程序用于检测物理机的各项硬件信息，包括CPU、内存、网卡、机械硬盘、固态硬盘和
RAID卡。其中每项检测由各个独立的模块负责，cpu_check_hw用于检测CPU的各项信息，
memory_check_hw用于检测内存的各项信息，network_check_hw用于检测网卡的各项
信息，hdd_check_hw用于检测机械硬盘的各项信息，nvme_check_hw用于检测NVMe固
态硬盘的各项信息，RAID用于检测RAID卡的各项信息，而shell_parse提供Python
调用shell命令的接口，以供上述模块调用。

*******************************************************************************

base_check.py是硬件检测的最终的统一接口，它会根据文件config中的内容调用相应的
模块来对config中指定项目进行检测。默认情况下，base_check.py会调用上述全部的6个
模块对物理机硬件信息进行全面的检测。我们也可以选择删除或注释(#)掉不需要检测的项目，
只对我们感兴趣的项目进行检测。
base_check.py的调用方式：
python base_check.py <config>，其中<config>中包含我们需要检测的项目名称，
每项一行，可参考本目录下的config文件

*******************************************************************************

deploy_code.py用于批量物理机检测的情形，其功能包括：1）将本程序拷贝到待检测的
物理机上；2）利用ssh命令在待检测的物理机上调用base_check.py来检测其硬件信息，
并将结果保存到指定的本地目录中；3）待所用机器检测完毕后，删除物理机上的代码。
deploy_code.py的调用方式：
python deploy_code.py <host_list> <result_dir> <config>，
其中<host_list>包含所有待检测的物理机的IP信息，每行一个，可参考本目录下的host_list.txt
文件，<result_dir>指定了检测结果存放的目录，此目录若存在，deploy_code.py会先
删除此目录及目录下的所有文件，然后创建新的同名目录，若不存在，直接创建同名目录，
<config>与base_check.py的参数<config>意义相同，但需要注意的是，这里的<config>
指定的是在远端物理机上base_check.py需要的<config>，因此需要写明绝对路径。

*******************************************************************************

本程序保存的结果是以JSON字符串的形式保存在文件中，因此提供print_json_to_txt.py
用于将JSON字符串的内容以更可读的方式展示出来。
print_json_to_txt.py的调用形式：
python print_json_to_txt.py <result_json_file>，其中<result_json_file>
指定了需要处理的JSON文件。

*******************************************************************************

compare_result.py用于其他机器检测结果与正常机器检测结果的比较，由于没有正常机器
硬件信息的模板，所以这里的正常机器需要我们从所有的检测结果中人工判读出来，然后以之
与其他机器进行比较。
compare_result.py的调用形式：
python compare_result.py <result_dir> <error_dir> <the_right_machine>，
其中<result_dir>为调用deploy_code.py的时候指定的<result_dir>，<error_dir>
会保存异常机器的相关信息，并且与<result_dir>类似，此目录若存在，compare_result.py
会先删除此目录及目录下的所有文件，然后创建新的同名目录，若不存在，直接创建同名目录，
<the_right_machine>为我们人工判读出来的正常机器。

*******************************************************************************

install_deps.py和rm_mine.py作用分别是在待检测的物理机上安装需要的RPM包：nvme-cli、
lshw与pciutils和删除所安装的RPM包。使用时需视情况选择直接从YUM源安装，还是下载安装包
后再本地安装。

*******************************************************************************
